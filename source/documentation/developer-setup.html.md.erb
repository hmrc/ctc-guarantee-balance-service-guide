---
title: Developer setup | CTC Guarantee Balance API phase 4 service guide
weight: 2
description: Software developers, designers, product owners or business analysts. Check a trader's guarantee balance.
---

# Developer setup

To develop using CTC Guarantee Balance API v1.0, you must:

- be familiar with HTTP, RESTful services, XML and OAuth2
- be registered as a developer on the [HMRC Developer Hub](/api-documentation)
- add at least one sandbox application on the Developer Hub

Each application you register will be assigned an HMRC `ApplicationId`.

You can view all the applications you have registered on the [Developer Hub Applications page](/developer/applications) where you can administer API subscriptions and [application credentials](/api-documentation/docs/authorisation/credentials).

Applications can be created in one of 2 possible environments:

- sandbox environments - where you start development and testing of your software
- production environment - when you are ready to go live you can request 'Production Credentials' that will create you a new application (with a new `ApplicationId`) in the production environment

The main differences between these 2 environments are that:

- in the sandbox environment you will [create and use test users](/api-documentation/docs/testing/test-users-test-data-stateful-behaviour) to call the endpoints
- the release version of an API in the sandbox will generally be ahead of the version of the API in production

The purpose of the sandbox (also known as External Test) is to provide an HMRC platform for all external partners to complete their required assurance activities so they are confident in their readiness for migration to NCTS phase 4.

For more information about using our sandbox environments, see [Testing in the sandbox](/api-documentation/docs/testing).

## Trader Test

Trader Test is a functional test platform where you can assure your software integration. Trader Test simulates both the automated responses and also the real-life experience where NCTS support staff perform the tasks of Border Force personnel.

## API subscription model

You must subscribe each application you register to CTC Guarantee Balance API v1.0. Subscribing allows an application access to all of the endpoints of the API.

## API access control

CTC Guarantee Balance API v1.0 is accessible only to applications that have been placed in the allow list for that API. If you cannot subscribe to or access the API on the Developer Hub, please check with the SDS Team if your ‘ApplicationId’ needs to be added to the allow list for that API.

## API versioning

For your application to be able to call a particular version of one of our APIs, you must:

- ensure that your application has access to it (by checking that the version is visible to you on the API’s documentation page)
- subscribe your application to it (in addition to any other subscriptions you may already have for other versions)
- modify your application’s `Accept` request header value when making a call to the API to reflect the version you wish to use (see the specific API reference for more details about request header values)

If a version of an API is not visible on the documentation page, you may need to request the SDS Team to put your application to be placed in the allow list.

For more information about versioning, see our [Reference guide](/api-documentation/docs/reference-guide#versioning).

## API rate limiting

Each software house should register a single application with HMRC. This application will be used to identify the software house during the OAuth 2.0 grant flow and will also be used in subsequent per user API calls. We limit the number of requests that each application can make. This protects our backend service against excessive load and encourages real-time API calls over batch processing.

We set limits based on anticipated loads and peaks. The rate limit of CTC Guarantee Balance API v1.0 is 1 request per minute per guarantee reference. It is not possible to request an increase in this rate limit.

If your software reaches the allocated limit, some of your requests will get a HTTP 429 response code. If your application receives a 429 response, it should back off temporarily before attempting to make the same request again.

In most cases, simply following software design best practices will deliver a good customer experience. API requests should not be unnecessarily batched and rate limited responses (HTTP 429) should be captured by the application and be automatically retried without generating user errors.

Retries should not be too quick (delay the next attempt by a few seconds) and should include some randomisation to minimise the risk of different application instances conflicting. Where an application instance is generating high volumes of API calls, the software design should consider periodically pausing or locally rate limiting those API calls to minimise the potential for a spike in traffic from one instance impacting another.

For more information about versioning, see our [Reference guide](/api-documentation/docs/reference-guide#versioning).

## API timeouts

Requests that take more than an hour to process will expire and will not be visible by the query endpoints. If this happens, you should start a new balance request. During normal service the response should take only seconds but if you are waiting longer then you should check the [NCTS service availability](https://www.gov.uk/government/publications/new-computerised-transit-system-service-availability-and-issues/new-computerised-transit-system-service-availability-and-issues).

## Authentication

You must use your Government Gateway account to authenticate directly with us. This grants authority to your application for specific scopes. We then issue an OAuth 2.0 access token that is specific to you. Your application passes the access token in subsequent API requests to user-restricted API endpoints. A declarant access token expires after 4 hours and will need to be refreshed.

For more information about user-restricted endpoints, see our [Authorisation](/api-documentation/docs/authorisation/user-restricted-endpoints) guide.

## Error handling

No system guarantees 100% error-free performance, so services calling our APIs need to be designed with failure in mind. There are several strategies to mitigate the errors that do occur.

### 5XX errors

If an API returns an HTTP response code in the 5XX range, the recommended response is to retry. Typically, a 500 (Internal Server Error) or 503 (Service Unavailable) response will be returned if there is an issue with an API. The issue may be transient, hence the recommendation to retry. The one exception in this error range is when a 501 (Not Implemented) is returned. This indicates that the endpoint is incorrect. Retrying will not help in this situation. Instead, the URL should be checked and fixed.

After multiple attempts, perhaps with an exponential backoff strategy, the expectation is that this will resolve the vast majority of errors. As an example, 3-5 retries over 1-2 minutes would be a reasonable retry strategy. Consideration should also be given to using the circuit breaker pattern.

### 4XX errors

If a response code in the 4XX range is received, the API consumer should examine the response payload for more detail on the error before attempting any retry. This error range usually indicates an error with the request. The request should be modified before attempting a retry.

For example, a 400 (Bad Request) with a payload response message stating ‘Payload is not valid according to schema’ should have its request payload modified so that it validates against the API schemas and then be resent. Similarly, a 406 (Not Acceptable) indicates that the `Accept` header is missing or invalid. The request should be amended accordingly.

If you are receiving these errors consistently, you should report the problem to the SDS Team.

### Best practices recommendations

There are many best practices recommendations for handling API errors and exceptions, including the following:

- [The 6 Pillars of the AWS Well-Architected Framework](https://aws.amazon.com/blogs/apn/the-6-pillars-of-the-aws-well-architected-framework/) (AWS Partner Network blog)
- [Design for Failure](https://docs.aws.amazon.com/whitepapers/latest/running-containerized-microservices/design-for-failure.html) (excerpt from Amazon white paper 'Running Containerized Microservices on AWS')
- [Implement resilient applications](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/) (excerpt from Microsoft e-book '.NET Microservices Architecture for Containerized .NET Applications')

## Error codes

The following error codes are limited in their detail due to constraints of the NCTS.

<table>
  <colgroup span="4"></colgroup>
  <tr>
    <th>Error type</th>
    <th>Error pointer</th>
    <th>Error reason</th>
    <th>Error message</th>
  </tr>
  <tr>
    <td>12</td>
    <td>RC1.TIN</td>
    <td></td>
    <td>Incorrect EORI Number</td>
  </tr>
  <tr>
    <td>12</td>
    <td>GRR(1).Guarantee reference number (GRN)</td>
    <td></td>
    <td>Incorrect Guarantee Reference Number</td>
  </tr>
  <tr>
    <td>12</td>
    <td>GRR(1).ACC(1).Access code</td>
    <td></td>
    <td>Incorrect Access Code</td>
  </tr>
  <tr>
    <td>14</td>
    <td>GRR(1).GQY(1).Query identifier</td>
    <td>R261</td>
    <td>Unsupported Guarantee Type</td>
  </tr>
  <tr>
    <td>12</td>
    <td>GRR(1).OTG(1).TIN</td>
    <td></td>
    <td>EORI and Guarantee Reference Number do not match</td>
  </tr>
  <tr>
    <td>26</td>
    <td>RC1.TIN</td>
    <td></td>
    <td>Query limit for the EORI has been exceeded, or an unknown EORI has been used.</td>
  </tr>
</table>

**Note:** There is a limit on the number of queries that can be made against an EORI number over a 24-hour period. An error type `26` is returned if this limit is exceeded. The limit is currently set to `1000` in both Trader Test and Production environments, but the Production limit may be subject to revision based upon usage.
